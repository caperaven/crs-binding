class l{constructor(){this._schemas={},crsbinding.events.emitter.on("run-process",this._runProcess.bind(this))}_runProcess(e){return new Promise(async(c,n)=>{const o=e.step.action,a=e.step.args.schema;let t=this._schemas[a];if(t==null&&crs.process.fetch!=null&&(t=await crs.process.fetch(e.step),this.add(t)),t==null)throw new Error(`process "${a}" not in registry and not loaded.`);const s=t[o];s.name=o,await h(s,e.parameters);const p=await crs.process.run(e.context,s).catch(u=>{let m=s.aborted==!0?"crs-process-aborted":"crs-process-error";crsbinding.events.emitter.emit(m,{step:s.currentStep,error:u}),e.step.aborted=!0}),i=e.step.args?.target;i!=null&&await crs.process.setValue(i,p,e.context,e.process,e.item),c()})}add(e){this._schemas[e.id]=e}remove(e){delete this._schemas[e.id]}}async function h(r,e){if(e!=null){r.parameters=r.parameters||{};for(const[c,n]of Object.entries(e))r.parameters[c]=n}}export{l as SchemaRegistry};
