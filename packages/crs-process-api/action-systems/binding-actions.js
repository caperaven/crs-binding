class o{static async perform(a,r,t,e){await this[a.action]?.(a,r,t,e)}static async create_context(a,r,t,e){const n=t.id||a?.args?.context_id||"process_context",s=crsbinding.data.addObject(n);return t!=null&&(t.parameters=t.parameters||{},t.parameters.bId=s),crsbinding.data.addContext(s,{}),s}static async free_context(a,r,t,e){t.parameters.bId!=null&&(crsbinding.data.removeObject(t.parameters.bId),delete t.parameters.bId)}static async get_property(a,r,t,e){const n=a.args.property,s=await crsbinding.data.getProperty(t.parameters.bId,n);return a.args.target!=null&&await crs.process.setValue(a.args.target,s,r,t,e),s}static async set_property(a,r,t,e){const n=a.args.property,s=await crs.process.getValue(a.args.value,r,t,e);crsbinding.data.setProperty(t.parameters.bId,n,s)}static async get_data(a,r,t,e){const n=crsbinding.data._data[t.parameters.bId];a.args.target!=null&&await crs.process.setValue(a.args.target,n,r,t,e)}static async set_errors(a,r,t,e){const n=a.args.error_store||"errors",s=await crs.process.getValue(a.args.errors,r,t,e),c=[];for(let i of s)c.push({message:i});await crsbinding.data.setProperty(t.parameters.bId,n,c)}}crs.intent.binding=o;export{o as BindingActions};
