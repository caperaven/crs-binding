class p{static async perform(t,s,r,a){await this[t.action](t,s,r,a)}static async observe(t,s,r,a){const e=await crs.dom.get_element(t.args.element,s,r,a),l=await crs.process.getValue(t.args.properties,s,r,a),i=await crs.process.getValue(t.args.callback,s,r,a);e._dataId==null&&(e._dataId=crsbinding.data.addObject(e.id));let n=e._dataId;e._processObserver=e._processObserver||{nextId:0};const c=b(e);e._processObserver[c]={properties:l,eval:u(e,l,c),callback:i};for(let d of l)crsbinding.data.addCallback(n,d,e._processObserver[c].eval);return c}static async unobserve(t,s,r,a){const e=await crs.dom.get_element(t.args.element,s,r,a),l=await crs.process.getValue(t.args.ids,s,r,a);for(const i of l){const n=e._processObserver[i];for(const c of n.properties)crsbinding.data.removeCallback(e._dataId,c,n.eval);n.properties=null,n.eval=null,n.callback=null,delete e._processObserver[i]}}static async notify_ready(t,s,r,a){const e=await crs.dom.get_element(t.args.element,s,r,a);e.dataset.ready="true",e.dispatchEvent(new CustomEvent("ready",{bubbles:!1}))}}function b(o){const t=o._processObserver.nextId;return o._processObserver.nextId=t+1,t}function u(o,t,s){let r=["if ( "];for(const e of t)r.push(`crsbinding.data.getProperty(this._dataId, "${e}")  != null && `);return r.push(`) { this._processObserver[${s}].callback.call(this) };`),r=r.join("").replace("&& )",")"),new Function(r).bind(o)}crs.intent.component=p;export{p as ComponentActions};
