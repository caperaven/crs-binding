class p{static async perform(r,a,s,t){await this[r.action](r,a,s,t)}static async observe(r,a,s,t){const e=await crs.dom.get_element(r.args.element,a,s,t),l=await crs.process.getValue(r.args.properties,a,s,t),i=await crs.process.getValue(r.args.callback,a,s,t);e._dataId==null&&(e._dataId=crsbinding.data.addObject(e.id));let c=e._dataId;e._processObserver=e._processObserver||{nextId:0};const n=b(e);e._processObserver[n]={properties:l,eval:u(e,l,n),callback:i};for(let d of l)crsbinding.data.addCallback(c,d,e._processObserver[n].eval);return n}static async unobserve(r,a,s,t){const e=await crs.dom.get_element(r.args.element,a,s,t),l=await crs.process.getValue(r.args.ids,a,s,t);for(const i of l){const c=e._processObserver[i];for(const n of c.properties)crsbinding.data.removeCallback(e._dataId,n,c.eval);c.properties=null,c.eval=null,c.callback=null,delete e._processObserver[i]}}}function b(o){const r=o._processObserver.nextId;return o._processObserver.nextId=r+1,r}function u(o,r,a){let s=["if ( "];for(const e of r)s.push(`crsbinding.data.getProperty(this._dataId, "${e}")  != null && `);return s.push(`) { this._processObserver[${a}].callback.call(this) };`),s=s.join("").replace("&& )",")"),new Function(s).bind(o)}crs.intent.component=p;export{p as ComponentActions};
