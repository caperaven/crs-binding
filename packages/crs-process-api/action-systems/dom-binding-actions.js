import"./dom-actions.js";class p{static async perform(a, t, e, n){await this[a.action]?.(a,t,e,n)}static async set_widget(a, t, e, n){const l=a.args.element,i=await _(a,t,e,n),o=await crs.process.getValue(a.args.context,t,e,n)||e?.parameters?.bId;await crsbinding.events.emitter.postMessage(l,{context:o,html:i})}static async clear_widget(a, t, e, n){const l=a.args.element;if(await crsbinding.events.emitter.postMessage(l,{context:null,html:""}),e.bindable==!0){let i=crsbinding.data.getContext(e.parameters.bId);delete i.pass,delete i.fail}}static async create_inflation_template(a, t, e, n){const l=await crs.process.getValue(a.args.template_id,t,e,n),i=await crs.process.getValue(a.args.source,t,e,n),o=await crs.process.getValue(a.args.tag_name,t,e,n),m=await crs.process.getValue(a.args.wrapper,t,e,n),d=await crs.process.getValue(a.args.ctx,t,e,n),u=Object.keys(i),s=document.createElement("template");let g=s;if(m!=null){const c=await this.create_element({args:m},t,e,n);s.content.appendChild(c),g=c}for(let c of u){let w=i[c];w.tag_name=o;let f=await this.create_element({args:w},t,e,n);f.textContent=["${",c,"}"].join(""),g.content!=null?g.content.appendChild(f):g.appendChild(f)}crsbinding.inflationManager.register(l,s,d||"context")}static async elements_from_template(a, t, e, n){const l=await crs.process.getValue(a.args.template_id,t,e,n),i=await crs.process.getValue(a.args.template,t,e,n),o=await crs.process.getValue(a.args.data,t,e,n),m=await crs.process.getValue(a.args.remove_template,t,e,n),d=await crs.process.getValue(a.args.recycle,t,e,n),u=await crs.process.getValue(a.args.row_index,t,e,n);let s=await crs.process.getValue(a.args.parent,t,e,n);s=await crs.dom.get_element(s,t,e,n),i!=null&&await h(i,l);let g=null;s!=null&&(d!=!1&&s.childElementCount>0?g=s.children:s.innerHTML="");const c=crsbinding.inflationManager.get(l,o,g,u||0);return c!=null&&s?.appendChild(c),m==!0&&crsbinding.inflationManager.unregister(l),c}static async update_cells(a, t, e, n){return this.elements_from_template(a,t,e,n)}}async function _(r, a){if(r.args.url.indexOf("$fn")!=-1){const t=r.args.url.replace("$fn.",""),e=await a[t](r.args),n=document.createElement("template"),l=r.args.html.split(".")[1];return n.innerHTML=e,crsbinding.templates.add(l,n),e}if(r.args.html.indexOf("$template")==0){const t=r.args.html.split(".")[1];return await crsbinding.templates.get(t,r.args.url)}}async function h(r, a, t){let e;r instanceof HTMLTemplateElement?e=r:e=document.querySelector(r),crsbinding.inflationManager.register(a,e)}crs.intent.dom_binding=p;export{p as DomBindingActions};
