class p{static async perform(t,a,e,n){await this[t.action]?.(t,a,e,n)}static async set_widget(t,a,e,n){const r=t.args.element,s=await _(t,a,e,n),o=await crs.process.getValue(t.args.context,a,e,n)||e?.parameters?.bId;await crsbinding.events.emitter.postMessage(r,{context:o,html:s})}static async clear_widget(t,a,e,n){const r=t.args.element;if(await crsbinding.events.emitter.postMessage(r,{context:null,html:""}),e?.bindable==!0){let s=crsbinding.data.getContext(e.parameters.bId);delete s.pass,delete s.fail}}static async create_inflation_template(t,a,e,n){const r=await crs.process.getValue(t.args.template_id,a,e,n),s=await crs.process.getValue(t.args.source,a,e,n),o=await crs.process.getValue(t.args.tag_name,a,e,n),d=await crs.process.getValue(t.args.wrapper,a,e,n),m=await crs.process.getValue(t.args.ctx,a,e,n),u=Object.keys(s),i=document.createElement("template");let g=i;if(d!=null){const c=await this.create_element({args:d},a,e,n);i.content.appendChild(c),g=c}for(let c of u){let w=s[c];w.tag_name=o;let f=await this.create_element({args:w},a,e,n);f.textContent=["${",c,"}"].join(""),g.content!=null?g.content.appendChild(f):g.appendChild(f)}await crsbinding.inflationManager.register(r,i,m||"context")}static async elements_from_template(t,a,e,n){const r=await crs.process.getValue(t.args.template_id,a,e,n),s=await crs.process.getValue(t.args.template,a,e,n),o=await crs.process.getValue(t.args.data,a,e,n),d=await crs.process.getValue(t.args.remove_template,a,e,n),m=await crs.process.getValue(t.args.recycle,a,e,n),u=await crs.process.getValue(t.args.row_index,a,e,n);let i=await crs.process.getValue(t.args.parent,a,e,n);i=await crs.dom.get_element(i,a,e,n),s!=null&&await h(s,r);let g=null;i!=null&&(m!=!1&&i.childElementCount>0?g=i.children:i.innerHTML="");const c=crsbinding.inflationManager.get(r,o,g,u||0);return c!=null&&i?.appendChild(c),d==!0&&crsbinding.inflationManager.unregister(r),c}static async update_cells(t,a,e,n){return this.elements_from_template(t,a,e,n)}}async function _(l,t){if(l.args.url.indexOf("$fn")!=-1){const a=l.args.url.replace("$fn.",""),e=await t[a](l.args),n=document.createElement("template"),r=l.args.html.split(".")[1];return n.innerHTML=e,crsbinding.templates.add(r,n),e}if(l.args.html.indexOf("$template")==0){const a=l.args.html.split(".")[1];return await crsbinding.templates.get(a,l.args.url)}}async function h(l,t,a){let e;l instanceof HTMLTemplateElement?e=l:e=document.querySelector(l),await crsbinding.inflationManager.register(t,e)}crs.intent.dom_binding=p;export{p as DomBindingActions};
