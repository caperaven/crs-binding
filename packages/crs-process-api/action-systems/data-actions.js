import u,{filter_data as c,sort_data as n,group_data as o,aggregate_rows as f,calculate_group_aggregate as w,iso8601_to_string as y,iso8601_batch as V,in_filter as _,unique_values as J,init_panic_hook as N,evaluate_obj as O,build_perspective as S}from"./../bin/data.js";await u();class v{static async perform(a,r,s,t){await this[a.action](a,r,s,t)}static async debug(){N()}static async filter(a,r,s,t){await crs.call("data","debug");let e=await crs.process.getValue(a.args.source,r,s,t);typeof e!="string"&&(e=JSON.stringify(e));const i=await crs.process.getValue(a.args.filter,r,s,t)||[],l=await crs.process.getValue(a.args.case_sensitive,r,s,t);let g=c(JSON.stringify(i),e,l==!0);return a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async sort(a,r,s,t){let e=await crs.process.getValue(a.args.source,r,s,t);typeof e!="string"&&(e=JSON.stringify(e));const i=await crs.process.getValue(a.args.sort,r,s,t)||[],l=await crs.process.getValue(a.args.rows,r,s,t)||[];let g=n(JSON.stringify(i),e,l);return a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async group(a,r,s,t){let e=await crs.process.getValue(a.args.source,r,s,t);const i=await crs.process.getValue(a.args.fields,r,s,t)||[];typeof e!="string"&&(e=JSON.stringify(e));let l=o(JSON.stringify(i),e);return l=JSON.parse(l),a.args.target!=null&&await crs.process.setValue(a.args.target,l,r,s,t),l}static async aggregate(a,r,s,t){let e=await crs.process.getValue(a.args.source,r,s,t);typeof e!="string"&&(e=JSON.stringify(e));const i=await crs.process.getValue(a.args.aggregate,r,s,t),l=await crs.process.getValue(a.args.rows,r,s,t)||[];let g=f(JSON.stringify(i),e,l);return g=JSON.parse(g),a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async aggregate_group(a,r,s,t){let e=await crs.process.getValue(a.args.source,r,s,t);typeof e!="string"&&(e=JSON.stringify(e));const i=await crs.process.getValue(a.args.group,r,s,t);let l=await crs.process.getValue(a.args.aggregate,r,s,t),g=w(JSON.stringify(i),JSON.stringify(l),e);return g=JSON.parse(g),a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async iso8601_to_string(a,r,s,t){const e=await crs.process.getValue(a.args.value,r,s,t),i=y(e);return a.args.target!=null&&await crs.process.setValue(a.args.target,i,r,s,t),i}static async iso8601_batch(a,r,s,t){const e=await crs.process.getValue(a.args.value,r,s,t),i=await crs.process.getValue(a.args.field,r,s,t);let l=V(JSON.stringify(e),i);return l=JSON.parse(l),a.args.target!=null&&await crs.process.setValue(a.args.target,l,r,s,t),l}static async in_filter(a,r,s,t){let e=await crs.process.getValue(a.args.source,r,s,t);typeof e!="string"&&(e=JSON.stringify(e));const i=await crs.process.getValue(a.args.filter,r,s,t)||[],l=await crs.process.getValue(a.args.case_sensitive,r,s,t),g=_(JSON.stringify(i),e,l==!0);return a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async unique_values(a,r,s,t){let e=await crs.process.getValue(a.args.source,r,s,t);const i=await crs.process.getValue(a.args.rows,r,s,t)||[];typeof e!="string"&&(e=JSON.stringify(e));const l=await crs.process.getValue(a.args.fields,r,s,t);let g=J(JSON.stringify(l),e,i);return g=JSON.parse(g),a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async assert_equal(a,r,s,t){let e=await crs.process.getValue(a.args.source,r,s,t);typeof e!="string"&&(e=JSON.stringify(e));const i=await crs.process.getValue(a.args.expr,r,s,t),l=await crs.process.getValue(a.args.case_sensitive,r,s,t);let g=O(JSON.stringify(i),e,l==!0);return a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async perspective(a,r,s,t){const e=await crs.process.getValue(a.args.rows,r,s,t)||[];let i=await crs.process.getValue(a.args.source,r,s,t);typeof i!="string"&&(i=JSON.stringify(i));const l=await crs.process.getValue(a.args.perspective,r,s,t);let g=S(JSON.stringify(l),i,e);return a.args.target!=null&&await crs.process.setValue(a.args.target,g,r,s,t),g}}crs.intent.data=v;export{v as DataActions};
