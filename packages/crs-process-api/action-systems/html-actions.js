class i{static async perform(a,r,t,s){await this[a.action]?.(a,r,t,s)}static async get(a,r,t,s){if(a.args.url!=null)return a.args.template!=null?await this.#r(a,r,t,s):await this.#a(a,r,t,s);if(a.args.schema!=null)return await this.#t(a,r,t,s);if(a.args.function!=null)return await this.#s(a,r,t,s);if(a.args.markdown!=null)return await crs.call("markdown","to_html",a.args,r,t,s)}static async create(a,r,t,s){const c=await crs.process.getValue(a.args.html,r,t,s),n=await crs.process.getValue(a.args.ctx,r,t,s)}static async#a(a,r,t,s){const c=await crs.process.getValue(a.args.url,r,t,s);return await fetch(c).then(n=>n.text())}static async#r(a,r,t,s){const c=await crs.process.getValue(a.args.template,r,t,s),n=await crs.process.getValue(a.args.url,r,t,s);return await crsbinding.templates.get(c,n)}static async#t(a,r,t,s){let c=await crs.process.getValue(a.args.schema,r,t,s);return typeof c=="string"&&(c=await fetch(c).then(n=>n.json())),schema?.parser?.parse(c)}static async#s(a,r,t,s){const c=await crs.process.getValue(a.args.function,r,t,s),n=await crs.process.getValue(a.args.parameters||[],r,t,s);return await c(...n)}}crs.intent.html=i;export{i as HtmlActions};
