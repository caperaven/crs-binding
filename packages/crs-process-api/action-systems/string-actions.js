class i{static async perform(a,r,t,s){await this[a.action]?.(a,r,t,s)}static async inflate(a,r,t,s){if(a.args.parameters==null)return a.args.template;let e=a.args.template,l=a.args.parameters,u=await g(e,l,r,t,s);return a.args.target!=null&&await crs.process.setValue(a.args.target,u,r,t,s),u}static async to_array(a,r,t,s){let l=(await crs.process.getValue(a.args.source,r,t,s)).split(a.args.pattern);return a.args.target!=null&&await crs.process.setValue(a.args.target,l,r,t,s),l}static async from_array(a,r,t,s){let e=await crs.process.getValue(a.args.source,r,t,s),l=a.args.separator||"",u=e.join(l);return a.args.target!=null&&await crs.process.setValue(a.args.target,u,r,t,s),u}static async replace(a,r,t,s){let e=await crs.process.getValue(a.args.source,r,t,s);const l=await crs.process.getValue(a.args.pattern,r,t,s),u=await crs.process.getValue(a.args.value,r,t,s);let c=e.split(l).join(u);return a.args.target!=null&&await crs.process.setValue(a.args.target,c,r,t,s),c}}async function g(n,a,r,t,s){n=n.split("${").join("${context."),a=await o(a,r,t,s);let e=new Function("context",["return `",n,"`;"].join("")),l=e(a);return e=null,l}async function o(n,a,r,t){const s=Object.keys(n);for(let e of s){let l=n[e];n[e]=await crs.process.getValue(l,a,r,t)}return n}crs.intent.string=i;export{i as StringActions};
