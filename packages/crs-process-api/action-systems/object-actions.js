class f{static async perform(s,r,t,a){return await this[s.action](s,r,t,a)}static async set(s,r,t,a){const e=await crs.process.getValue(s.args.properties,r,t,a),n=Object.keys(e);for(let c of n){const l=await crs.process.getValue(e[c],r,t,a);c=u(c),await crs.process.setValue(c,l,r,t,a)}}static async get(s,r,t,a){const e=await crs.process.getValue(s.args.properties,r,t,a),n=[];for(let c of e){c=u(c);const l=await crs.process.getValue(c,r,t,a);n.push(l)}return s.args.target!=null&&await crs.process.setValue(s.args.target,n,r,t,a),n}static async delete(s,r,t,a){const e=await crs.process.getValue(s.args.properties,r,t,a);for(let n of e){n=u(n);let c=r;n.indexOf("$process")!=-1&&(c=t),n.indexOf("$item")!=-1&&(c=t),await w(c,n)}}static async copy_on_path(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),n=await crs.process.getValue(s.args.target,r,t,a),c=await crs.process.getValue(s.args.properties,r,t,a);for(let l of c)l=l.split("/").join("."),await y(e,n,l)}static async create(s,r,t,a){s.args.target!=null&&await crs.process.setValue(s.args.target,{},r,t,a)}static async assign(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),n=await crs.process.getValue(s.args.target,r,t,a);return Object.assign(n,e)}static async clone(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),n=await crs.process.getValue(s.args.properties,r,t,a);if(n==null){const l=Object.assign({},e);return s.args.target!=null&&await crs.process.setValue(s.args.target,l,r,t,a),l}const c={};for(let l of n)c[l]=e[l];return s.args.target!=null&&await crs.process.setValue(s.args.target,c,r,t,a),c}static async json_clone(s,r,t,a){const e=await crs.process.getValue(s.args.source,r,t,a),n=JSON.stringify(e),c=JSON.parse(n);return s.args.target!=null&&await crs.process.setValue(s.args.target,c,r,t,a),c}static async assert(s,r,t,a){let e=!0;const n=await crs.process.getValue(s.args.source,r,t,a);if(n==null)return!1;const c=await crs.process.getValue(s.args.properties,r,t,a);for(const l of c)if(await g(n,l)==null){e=!1;break}return s.args.target!=null&&await crs.process.setValue(s.args.target,e,r,t,a),e}}function u(i){return i.indexOf("$")==-1&&(i=`$context.${i}`),i.split("/").join(".")}async function p(i,s,r){const t=s.split(".").join("/").split("/"),a=t[t.length-1];let e=i;for(let n=0;n<t.length-1;n++){const c=t[n],l=t[n+1],o=isNaN(l)==!1;o==!0&&(t[n+1]=Number(l)),e[c]==null&&(e[c]=o?[]:{}),e=e[c]}e[a]=r}async function g(i,s){const r=s.split(".").join("/").split("/"),t=r[r.length-1];let a=i;for(let e=0;e<r.length-1;e++){if(a==null)return null;Array.isArray(a)?a=a[Number(r[e])]:a=a[r[e]]}return a==null?null:a[t]}async function w(i,s){if(i==null)return;const r=s.split("$context.").join("").split(".").join("/").split("/");let t=i;const a=[i];for(let c=0;c<r.length;c++){const l=r[c];if(t[l]==null)return;t=t[l],a.push(t)}const e=r.length-1,n=r[e];t=a[e],Array.isArray(t)?t.splice(Number(n),1):delete t[n]}async function y(i,s,r){const t=await g(i,r);if(t==null)return;const a=await crs.call("object","json_clone",{source:t});await p(s,r,a)}crs.intent.object=f;export{f as ObjectActions};
