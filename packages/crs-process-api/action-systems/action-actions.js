class f{static async perform(n,r,a,s){let t=`return await ${n.action.replace("$","")}(...(args||[]))`,e=a.functions?.[t];e==null&&(e=new globalThis.crs.AsyncFunction("context","process","item","args",t),a.functions[t]=e);let c=await u(n,r,a,s);const l=await e(r,a,s,c);return n.args.target!=null&&await crs.process.setValue(n.args.target,l,r,a,s),l}}async function u(i,n,r,a){const s=await crs.process.getValue(i.args.parameters,n,r,a);let t=[];if(s==null)return t;for(const e of s){const c=await crs.process.getValue(e,n,r,a);t.push(c)}return t}async function w(i,n,r,a,s){const t=await crs.process.getValue(n.args.action,r,a,s),e=await u(n,r,a,s),c=await crsbinding.utils.getValueOnPath(i,t);let l=i;if(t.indexOf(".")!==-1){const o=t.split(".");o.pop();const g=o.join(".");l=await crsbinding.utils.getValueOnPath(i,g)}return c.call(l,...e)}crs.intent.action=f;export{f as ActionActions,w as callFunctionOnPath,u as getParameters};
