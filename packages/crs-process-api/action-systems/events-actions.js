class o{static async perform(s,e,t,r){await this[s.action]?.(s,e,t,r)}static async post_message(s,e,t,r){const a=s.args.parameters==null?{}:JSON.parse(JSON.stringify(s.args.parameters)),i=Object.keys(a);for(let n of i)a[n]=await crs.process.getValue(a[n],e,t,r);await crsbinding.events.emitter.postMessage(s.args.query,a)}static async emit(s,e,t,r){const a=s.args.parameters==null?{}:JSON.parse(JSON.stringify(s.args.parameters)),i=Object.keys(a);for(let g of i)a[g]=await crs.process.getValue(a[g],e,t,r);const n=await crs.process.getValue(s.args.event,e,t,r),c=await crsbinding.events.emitter.emit(n,a);return s.args.target!=null&&await crs.process.setValue(s.args.target,c,e,t,r),c}}crs.intent.events=o;export{o as EventsActions};
