import"./binding-actions.js";class b{static async perform(r, s, e, c){await this[r.action]?.(r,s,e,c)}static async hex_to_rgb(r, s, e, c){const t=await crs.process.getValue(r.args.hex,s,e,c),a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return a?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:null}static async hex_to_rgba(r, s, e, c){const t=await crs.process.getValue(r.args.hex,s,e,c),a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return a?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16),a:parseInt(a[4],16)}:null}static async hex_to_normalised(r, s, e, c){const t=await this.hex_to_rgba(r,s,e,c);return t.r=await crs.call("math","normalize",{value:t.r,min:0,max:255}),t.g=await crs.call("math","normalize",{value:t.g,min:0,max:255}),t.b=await crs.call("math","normalize",{value:t.b,min:0,max:255}),t.a=await crs.call("math","normalize",{value:t.a,min:0,max:255}),t}static async rgb_to_hex(r, s, e, c){const t=await crs.process.getValue(r.args.r,s,e,c)||0,a=await crs.process.getValue(r.args.g,s,e,c)||0,n=await crs.process.getValue(r.args.b,s,e,c)||0;return["#",o(t),o(a),o(n)].join("")}static async rgba_to_hex(r, s, e, c){const t=await crs.process.getValue(r.args.r,s,e,c)||0,a=await crs.process.getValue(r.args.g,s,e,c)||0,n=await crs.process.getValue(r.args.b,s,e,c)||0,i=await crs.process.getValue(r.args.a,s,e,c)||255;return["#",o(t),o(a),o(n),o(i)].join("")}static async css_to_hex(r, s, e, c){return await _(r,s,e,c,async a=>{if(a.indexOf("#")!=-1)return a.length==7?`${a}ff`:a;{a=a.replace("rgba(",""),a=a.replace("rgb(",""),a=a.replace(")","");const n=a.split(",");return await this.rgba_to_hex({args:{r:Number(n[0].trim()),g:Number(n[1].trim()),b:Number(n[2].trim()),a:n.length==3?255:Number(n[3].trim())}},s,e,c)}})}static async css_to_normalized(r, s, e, c){const t=await this.css_to_hex(r,s,e,c),a=Object.keys(t);for(const n of a){const i=t[n];t[n]=await this.hex_to_normalised({args:{hex:i}},s,e,c).catch(g=>console.error(error))}return t}}async function _(l, r, s, e, c){const t=await crs.dom.get_element(l.args.element),a=await crs.process.getValue(l.args.variables,r,s,e),n=getComputedStyle(t),i={};for(let g of a){const u=n.getPropertyValue(g).trim(),h=await c(u).catch(m=>console.error(m));i[g]=h}return i}function o(l){const r=l.toString(16);return r.length==1?"0"+r:r}crs.intent.colors=b;export{b as ColorsActions};
