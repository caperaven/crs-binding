import"./binding-actions.js";class h{static async perform(t,s,e,c){await this[t.action]?.(t,s,e,c)}static async hex_to_rgb(t,s,e,c){const r=await crs.process.getValue(t.args.hex,s,e,c),a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r);return a?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:null}static async hex_to_rgba(t,s,e,c){const r=await crs.process.getValue(t.args.hex,s,e,c),a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r);return a?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16),a:parseInt(a[4],16)}:null}static async hex_to_normalised(t,s,e,c){const r=await this.hex_to_rgba(t,s,e,c);return r.r=await crs.call("math","normalize",{value:r.r,min:0,max:255}),r.g=await crs.call("math","normalize",{value:r.g,min:0,max:255}),r.b=await crs.call("math","normalize",{value:r.b,min:0,max:255}),r.a=await crs.call("math","normalize",{value:r.a,min:0,max:255}),r}static async rgb_to_hex(t,s,e,c){const r=await crs.process.getValue(t.args.r,s,e,c)||0,a=await crs.process.getValue(t.args.g,s,e,c)||0,n=await crs.process.getValue(t.args.b,s,e,c)||0;return["#",i(r),i(a),i(n)].join("")}static async rgba_to_hex(t,s,e,c){const r=await crs.process.getValue(t.args.r,s,e,c)||0,a=await crs.process.getValue(t.args.g,s,e,c)||0,n=await crs.process.getValue(t.args.b,s,e,c)||0,o=await crs.process.getValue(t.args.a,s,e,c)||255;return["#",i(r),i(a),i(n),i(o)].join("")}static async rgb_text_to_hex(t,s,e,c){let r=await crs.process.getValue(t.args.value,s,e,c);r=r.replace("rgba(",""),r=r.replace("rgb(",""),r=r.replace(")","");const a=r.split(",");return await this.rgb_to_hex({args:{r:Number(a[0].trim()),g:Number(a[1].trim()),b:Number(a[2].trim())}},s,e,c)}static async css_to_hex(t,s,e,c){return await _(t,s,e,c,async a=>{if(a.indexOf("#")!=-1)return a.length==7?`${a}ff`:a;{a=a.replace("rgba(",""),a=a.replace("rgb(",""),a=a.replace(")","");const n=a.split(",");return await this.rgba_to_hex({args:{r:Number(n[0].trim()),g:Number(n[1].trim()),b:Number(n[2].trim()),a:n.length==3?255:Number(n[3].trim())}},s,e,c)}})}static async css_to_normalized(t,s,e,c){const r=await this.css_to_hex(t,s,e,c),a=Object.keys(r);for(const n of a){const o=r[n];r[n]=await this.hex_to_normalised({args:{hex:o}},s,e,c).catch(g=>console.error(error))}return r}}async function _(l,t,s,e,c){const r=await crs.dom.get_element(l.args.element),a=await crs.process.getValue(l.args.variables,t,s,e),n=getComputedStyle(r),o={};for(let g of a){const u=n.getPropertyValue(g).trim(),m=await c(u).catch(b=>console.error(b));o[g]=m}return o}function i(l){const t=l.toString(16);return t.length==1?"0"+t:t}crs.intent.colors=h;export{h as ColorsActions};
