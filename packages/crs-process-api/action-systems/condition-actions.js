class l{static async perform(t,n,s,r){const e=u(t.args.condition,s)(n,s,r);if(e&&t.pass_step!=null){const o=await crs.getNextStep(s,t.pass_step);await crs.process.runStep(o,n,s,r)}if(!e&&t.fail_step!=null){const o=await crs.getNextStep(s,t.fail_step);await crs.process.runStep(o,n,s,r)}return t.args.target!=null&&await crs.process.setValue(t.args.target,e,n,s,r),e}}function u(i,t){let n=i;for(const r of Object.keys(t.prefixes))n=n.split(r).join(t.prefixes[r]);n.indexOf("$binding")!=-1&&(n=f(n,t.parameters.bId)),n=n.split("$").join("");const s=`return ${n}`;return new Function("context","process","item",s)}function f(i,t){const n=i.indexOf("$binding"),s=i.indexOf(" ",n),c=i.substring(n,s).split("."),e=c[1],o=[`crsbinding.data.getProperty(${t}, "${e}")`];c.length>2&&(c.splice(0,2),o.push(c.join(".")));const a=Array.from(i);return a.splice(n,s-n,o.join(".")),i=a.join(""),i.indexOf("$binding")!=-1&&(i=f(i,t)),i}crs.intent.condition=l;export{l as ConditionActions};
