class p{static async perform(i,c,n,r){let o,t,s;if(i.args.condition.indexOf("$context")!=-1)o=c,t=i.args.condition.split("$context").join("$context");else if(i.args.condition.indexOf("$process")!=-1)o=n,t=i.args.condition.split("$process").join("$context");else if(i.args.condition.indexOf("$item")!=-1)o=r,t=i.args.condition.split("$item").join("$context");else if(i.args.condition.indexOf("$binding")!=-1){const e=n.parameters.bId,l=i.args.condition.replace("$binding.","").split(" "),d=l[0];l.splice(0,1),t=`return crsbinding.data.getProperty(${e}, "${d}") ${l.join(" ")}`,s=crsbinding.expression.compile(t,null,{sanitize:!1})}s=s||crsbinding.expression.compile(t);const a=s.function(o)==!0;if(a&&i.pass_step!=null){const e=await crs.getNextStep(n,i.pass_step);await crs.process.runStep(e,c,n,r)}if(!a&&i.fail_step!=null){const e=await crs.getNextStep(n,i.fail_step);await crs.process.runStep(e,c,n,r)}return a}}crs.intent.condition=p;export{p as ConditionActions};
